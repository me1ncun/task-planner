version: '3.4'

networks:
  deploy-guide:
    driver: bridge

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "${ZOOKEEPER_PORT}:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT}:9092"
      - "9997:9997"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: '${KAFKA_ZOOKEEPER_CONNECT}'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: '${KAFKA_ADVERTISED_LISTENERS}'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: '${KAFKA_JMX_PORT}'
      KAFKA_JMX_HOSTNAME: kafka
  
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "${KAFKA_UI_PORT}:8080"
    depends_on:
      - kafka
      - zookeeper
    environment:
      DYNAMIC_CONFIG_ENABLED: true
  
  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    environment:
      - POSTGRES_USER = ${POSTGRES_USER}
      - POSTGRES_PASSWORD = ${POSTGRES_PASSWORD}
      - POSTGRES_DB = ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - deploy-guide
    volumes:
      - ./pg-data:/var/lib/postgresql/data
  
  user-api:
    image: user-api
    container_name: user-api
    build:
      context: .
      dockerfile: taskplanner-user-service/Dockerfile
    ports:
      - "${SERVER_PORT}:8080"
    networks:
      - deploy-guide
    depends_on:
      - kafka
      - postgres
    command: [ "dotnet", "ef", "database update" ]

  user-frontend:
    image: user-frontend
    container_name: user-frontend
    build:
      context: .
      dockerfile: taskplanner-ui/Dockerfile
    ports:
      - "${CLIENT_PORT}:8080"
    networks:
      - deploy-guide
    depends_on:
      - user-api
      - kafka
      - postgres
  
  user-mailer:
    image: user-mailer
    container_name: user-mailer
    build:
      context: .
      dockerfile: taskplanner-mailservice/Dockerfile
    networks:
      - deploy-guide
    depends_on:
      - kafka
  
  user-scheduler:
    image: user-scheduler
    container_name: user-scheduler
    build:
      context: .
      dockerfile: taskplanner-scheduler/Dockerfile
    networks:
      - deploy-guide
    depends_on:
      - kafka
      - postgres

volumes:
  rabbitmq:
  pg-data: